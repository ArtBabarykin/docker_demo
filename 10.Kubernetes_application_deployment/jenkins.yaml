---
apiVersion: v1
kind: Namespace
metadata:
  name: ci-cd2
---
apiVersion: v1
kind: Secret
metadata:
  name: jenkins-secret
  namespace: ci-cd2
type: Opaque
data:
  password: c3VwZXJfcGFzcwo=
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: basic-security
  namespace: ci-cd2
data:
  basic-security.groovy: |
        #!groovy        
        import jenkins.model.*
        import hudson.security.*
        def instance = Jenkins.getInstance()
        println "--> creating local user 'admin'"
        password = System.getenv("PASS")
        def hudsonRealm = new HudsonPrivateSecurityRealm(false)
        hudsonRealm.createAccount('admin','admin')
        instance.setSecurityRealm(hudsonRealm)
        def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
        strategy.setAllowAnonymousRead(true)
        instance.setAuthorizationStrategy(strategy)
        instance.save()
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-config
  namespace: ci-cd2
data:
  jenkins.yaml: |
        jenkins:
          numExecutors: 4
          clouds:
          - kubernetes:
              containerCapStr: "10"
              maxRequestsPerHostStr: "32"
              jenkinsUrl: "http://jenkins:8080"
              name: "kubernetes"
              namespace: "ci-cd2"
              skipTlsVerify: true
        credentials:
          system:
            domainCredentials:
            - credentials:
              - usernamePassword:
                  description: "Githubuser"
                  id: "some_randome"
                  password: "password"
                  scope: GLOBAL
                  username: "git_hub_user"
        unclassified:
          location:
            adminAddress: "artbtutor@gmail.com"
            url: "http://jenkins.k8s-4.sa/"
          shell:
            shell: "/bin/bash"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: jenkins
  namespace: ci-cd2
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: default
  namespace: ci-cd2
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
  namespace: ci-cd2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jenkins
  template:
    metadata:
      labels:
        app: jenkins
    spec:
      containers:
        - name: jenkins
          image: pluhin31/jenkins_ci
          imagePullPolicy: Always
          env:
            - name: JAVA_OPTS
              value: "-Djenkins.install.runSetupWizard=false"
            - name: PASS
              valueFrom:
                secretKeyRef:
                  name: jenkins-secret
                  key: password
            - name: CASC_JENKINS_CONFIG
              value: /var/jenkins_home/casc_configs/jenkins.yaml
          ports:
            - name: http-port
              containerPort: 8080
            - name: jnlp-port
              containerPort: 50000
          securityContext:
            runAsUser: 0
          resources:
            requests:
              cpu: 1000m
              memory: 2000Mi
            limits:
              cpu: 2000m
              memory: 4000Mi
          volumeMounts:
            - name: docker-sock
              mountPath: /var/run
            - name: jenkins-auth-config
              mountPath: /var/jenkins_home/init.groovy.d/basic-security.groovy
              subPath: basic-security.groovy
            - name: jenkins-config-yaml
              mountPath: /var/jenkins_home/casc_configs/jenkins.yaml
              subPath: jenkins.yaml
            - name: jenkins-home
              mountPath: /var/jenkins_home
      volumes:
        - name: docker-sock
          hostPath:
            path: /var/run
        - name: jenkins-auth-config
          configMap:
            name: basic-security
        - name: jenkins-config-yaml
          configMap:
            name: jenkins-config
        - name: jenkins-home
          nfs:
            server: 192.168.37.105
            path: /mnt/IT-Academy/nfs-data/sa2-14-20/ArtBabarykin/jenkins
---
apiVersion: v1
kind: Service
metadata:
  name: jenkins
  namespace: ci-cd2
spec:
  type: NodePort
  ports:
    - name: master
      port: 8080
      targetPort: 8080
      nodePort: 31456
    - name: slave
      port: 50000
      targetPort: 50000
      nodePort: 31457
  selector:
    app: jenkins
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  namespace: ci-cd2
  name: ingress-jenkins
spec:
  rules:
  - host: jenkins.k8s-4.sa
    http:
      paths:
      - path: /
        backend:
          serviceName: jenkins
          servicePort: 8080
